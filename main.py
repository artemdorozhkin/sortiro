import asyncio
from datetime import datetime, timedelta
from typing import Union

from aiogram import Bot, Dispatcher, types, filters
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from app import config, database

props = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=config.BOT_TOKEN, default=props)
dp = Dispatcher()


UTC_OFFSET = 3


@dp.message(filters.CommandStart())
async def start_timer(message: types.Message):
    text = [
        "–ù—É –ø—Ä–∏–≤–µ—Ç, —Å–µ—Ä—É–Ω–∏—à–∫–∞ üòè",
        "",
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç SORTIRO, –∏ —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–º –¥–µ–ª–æ–º üöΩ",
        "",
        "–û—Ç–ø—Ä–∞–≤—å:",
        "/start_timer - –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—à—å üí©",
        "/stop_timer - –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å üí©",
        "/day_stat - —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
        "/week_stat - —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ –Ω–µ–¥–µ–ª—é",
        "/month_stat - —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ –º–µ—Å—è—Ü",
        "/all_stat - —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è",
    ]
    await message.reply("\n".join(text))


@dp.message(filters.Command("start_timer"))
async def start_timer(message: types.Message):
    user_id = message.from_user.id
    timer = database.get_timer(user_id=user_id)
    if timer:
        await message.reply(
            "–¢—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ üí©\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤—å /stop_timer"
        )
    else:
        start_time = datetime.now()
        database.create_timer(user_id=user_id, start_time=start_time)
        await message.reply("–ü–æ—à–µ–ª –ø—Ä–æ—Ü–µ—Å—Å üí©")


@dp.message(filters.Command("stop_timer"))
async def stop_timer(message: types.Message):
    user_id = message.from_user.id
    timer = database.get_timer(user_id=user_id)
    if timer:
        start_time = datetime.fromisoformat(timer[0])
        end_time = datetime.now()
        duration = int((end_time - start_time).total_seconds())
        database.stop_timer(user_id=user_id, end_time=end_time, duration=duration)
        await message.reply(
            f"–° –æ–±–ª–µ–≥—á–µ–Ω–∏–µ–º! üòè\n–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {timedelta(seconds=duration)}."
        )
    else:
        await message.reply(
            "–¢—ã –∂–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –ø—Ä–æ—Ü–µ—Å—Å?üò≥\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å /start_timer"
        )


@dp.message(filters.Command("day_stat"))
async def get_stats(message: types.Message):
    user_id = message.from_user.id
    start_period = datetime.now() - timedelta(days=1) + timedelta(hours=UTC_OFFSET)
    stats = get_stat(user_id=user_id, period=start_period)
    stats.insert(0, "üìà<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å</b>\n")
    await message.reply("\n".join(stats))


@dp.message(filters.Command("week_stat"))
async def get_stats(message: types.Message):
    user_id = message.from_user.id
    start_period = datetime.now() - timedelta(weeks=1) + timedelta(hours=UTC_OFFSET)
    stats = get_stat(user_id=user_id, period=start_period)
    stats.insert(0, "üìà<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n")
    await message.reply("\n".join(stats))


@dp.message(filters.Command("month_stat"))
async def get_stats(message: types.Message):
    user_id = message.from_user.id
    start_period = datetime.now() - timedelta(days=30) + timedelta(hours=UTC_OFFSET)
    stats = get_stat(user_id=user_id, period=start_period)
    stats.insert(0, "üìà<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü</b>\n")
    await message.reply("\n".join(stats))


@dp.message(filters.Command("all_stat"))
async def get_stats(message: types.Message):
    user_id = message.from_user.id
    start_period = None
    stats = get_stat(user_id=user_id, period=start_period)
    stats.insert(0, "üìà<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è</b>\n")
    await message.reply("\n".join(stats))


def get_stat(user_id: int, period: Union[datetime, None]):
    if period:
        stat = database.get_stat_by_period(user_id=user_id, period=period)
    else:
        stat = database.get_stats(user_id=user_id)
    if stat:
        duration, count = stat

    duration, count = duration if duration else 0, count if count else 0
    average_time = str(
        timedelta(seconds=duration / count) if count > 0 else timedelta(seconds=0)
    ).split(".")[0]

    return [
        f"‚åö–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {timedelta(seconds=duration)}.",
        f"üîÑÔ∏è–¢—ã –æ–±–ª–µ–≥—á–∞–ª—Å—è: {count} {pluralization(count)}.",
        f"üìä–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {average_time}.",
    ]


def pluralization(count: int):
    if count < 20:
        if count <= 1 or count >= 5:
            return "—Ä–∞–∑"
        else:
            return "—Ä–∞–∑–∞"
    new_count = int(str(count)[-1])
    return pluralization(new_count)


async def main():
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
